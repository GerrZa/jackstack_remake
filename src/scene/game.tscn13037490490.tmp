[gd_scene load_steps=8 format=3 uid="uid://yriqcto2yb11"]

[ext_resource type="Texture2D" uid="uid://dgbnbi1u6dlpj" path="res://icon.svg" id="1_4lbv0"]
[ext_resource type="FontFile" uid="uid://m0vw8abk7pln" path="res://asset/Mystery Font.ttf" id="2_v5eom"]

[sub_resource type="GDScript" id="GDScript_j1ehk"]
resource_name = "game"
script/source = "extends Node2D

var plr_hold_card = null #node path

var stack_path : NodePath
var plr_card_mark_path : NodePath
var plr_token_mark_path : NodePath

var card_start_c = 5
var token_start_c = 3
var setup_complete = false

var timebetween_card_setup = 0.2
var timebetween_token_setup = 0.2

var card = preload(\"res://src/obj/plr_card.tscn\")
var token = preload(\"res://src/obj/minus_token.tscn\")

#parts
var circle_parts = preload(\"res://src/parts/circle_explode.tscn\")
var line_parts = preload(\"res://src/parts/line_explode.tscn\")
const WHITE_COLOR = Color.PALE_GREEN

var turn = \"p\"

func _ready() -> void:
	stack_path = get_node(\"stack\").get_path()
	plr_card_mark_path = get_node(\"plr_card_mark\").get_path()
	plr_token_mark_path = get_node(\"plr_token_mark\").get_path()
	
	setup()

func setup():
	var card_setup = func():
		for i in range(card_start_c):
			var card_ins = card.instantiate()
			randomize()
			
			card_ins.value = randi_range(1,12) #get random card value
			
			if card_ins.value >= 10:
				card_ins.value = randi_range(10,13)
			
			$plr_card_mark.add_card(card_ins)
			
			await get_tree().create_timer(timebetween_card_setup).timeout
		
		setup_complete = true
	
	var token_setup = func():
		for i in range(token_start_c):
			var tok_ins = token.instantiate()
			randomize()
			
			$plr_token_mark.add_token()
			
			await get_tree().create_timer(timebetween_token_setup).timeout
	
	card_setup.call()
	token_setup.call()
	

func _process(delta: float) -> void:
	
	if plr_hold_card != null:
		Input.set_default_cursor_shape(Input.CURSOR_ARROW)
	
	if Input.is_action_just_pressed(\"ui_up\"):
		turn = \"e\"
	
	#if holded card have been hovering
	if plr_hold_card != null and plr_hold_card.mouse_in:
		Input.set_default_cursor_shape(Input.CURSOR_POINTING_HAND)
		if Input.is_action_just_pressed(\"m1\"):
			get_node(stack_path).stack_sum += plr_hold_card.real_value
			
			randomize()
			
			#spawn part on cursor
			PartSpawner.spawn(\"circle_ex\", get_global_mouse_position(), {\"radius\":15, \"added_radius\":10, \"speed\": 0.7, \"col\" : WHITE_COLOR})
			PartSpawner.spawn(\"circle_ex\", get_global_mouse_position(), {\"radius\":30, \"added_radius\":20, \"speed\": 0.7, \"col\" : WHITE_COLOR})
			PartSpawner.spawn(\"line_ex\", get_global_mouse_position(), {\"scale\": Vector2(2,2), \"speed\": 0.8, \"rotation_degrees\": randf_range(0, 359), \"modulate\" : WHITE_COLOR})
			
			
			PartSpawner.spawn(\"spr_ex\",plr_hold_card.global_position + Vector2(-16,24) , {\"spr\" : load(\"res://asset/obj/ptt_plrcard.png\"), \"centered\": true, \"spr_speed\" : 0.97, \"speed\": 0.7})
			
			PartSpawner.spawn(\"circle_ex\", $stack.global_position, {\"radius\":45, \"added_radius\":15, \"col\" : WHITE_COLOR})
			
			PartSpawner.spawn(\"text_float\", $stack.global_position + Vector2(0,-4), {\"text\": \"+\" + var_to_str(plr_hold_card.real_value), \"color\": Color.CHARTREUSE, \"outline_color\": Color.BLACK})
			
			plr_hold_card.queue_free()
			plr_hold_card = null
			
			var card_ins = card.instantiate() #spawn new card
			
			randomize()
			card_ins.value = randi_range(1,12) #get random card value
			
			if card_ins.value >= 10:
				card_ins.value = randi_range(10,13)
			
			$plr_card_mark.add_card(card_ins)
			
			#turn = \"e\" #change to enemy turn
"

[sub_resource type="GDScript" id="GDScript_qih31"]
script/source = "extends Node2D

var stack_sum = 0
var base_radius = 33
var add_radius = 2

var t = 0

var circles = []

#each circle var random range
var radius_range = Vector2(12,16)
var speed_range = Vector2(0.2,0.3)
var decrease_range = Vector2(0.9, 0.95)

var init_circles_range = Vector2(14,17)

func _ready() -> void:
	randomize()
	for i in range(randi_range(init_circles_range.x, init_circles_range.y)):
		create_circle()
		
		randomize()
		
		await get_tree().create_timer(randf_range(0.01, 0.05)).timeout

func _process(delta: float) -> void:
	queue_redraw()
	
	t += delta
	
	position = Vector2(120, 90) + Vector2(cos(t * 0.5) * 4, sin(t) * 2)
	
	$stack_num.text = var_to_str(stack_sum) + \" / 21\"
	#$stack_num.position = Vector2(-38, -17) + Vector2(cos(t * 0.5) * 5, sin(t) * 3)

func _physics_process(delta: float) -> void:
	for c in circles:
		c[\"color\"].a *= c[\"decrease\"]
		c[\"pos\"] += c[\"dir\"] * c[\"speed\"]
		c[\"speed\"] *= c[\"decrease\"]
		
		if c[\"color\"].a < 0.05:
			circles.erase(c)
			
			create_circle()

func _draw() -> void:
	for c in circles:
		draw_circle(c[\"pos\"], c[\"radius\"], c[\"color\"], true)
	
	draw_circle(Vector2.ZERO, base_radius + (add_radius * cos(t)), Color.WHITE, true)

func create_circle():
	randomize()
	var rand_rad = deg_to_rad(randf_range(0, 359))
	var new_dir = Vector2(cos(rand_rad), sin(rand_rad))
	
	var margin = 22
	
	circles.append({
		\"pos\" : Vector2(cos(rand_rad) * margin, sin(rand_rad) * margin),
		\"dir\" : new_dir,
		\"speed\" : randf_range(speed_range.x, speed_range.y),
		\"radius\" : randf_range(radius_range.x, radius_range.y),
		\"color\" : Color.WHITE,
		\"decrease\" : randf_range(decrease_range.x, decrease_range.y)
	})
"

[sub_resource type="LabelSettings" id="LabelSettings_e3hox"]
font = ExtResource("2_v5eom")
font_size = 8
outline_size = 3
outline_color = Color(0, 0, 0, 1)

[sub_resource type="GDScript" id="GDScript_4lbv0"]
resource_name = "plr_card_pos"
script/source = "extends Marker2D

const CARD_GAP = 16
var hover_offset = 8

var card = preload(\"res://src/obj/plr_card.tscn\")
const card_init_pos = Vector2(50,0)

var self_init_pos = Vector2()
var self_offset_y = 0

func _ready() -> void:
	self_init_pos = position
	update_card()

func add_card(card, init := true):
	if init:
		card.position = card_init_pos
		add_child(card)
	else:
		card.reparent(self)
	update_card()

func update_card():
	var i = get_child_count() - 1
	for c in get_children():
		c.to_pos = Vector2(-i * CARD_GAP, 0)
		
		i-=1

func _process(delta: float) -> void:
	#reset things
	for c in get_children():
		c.spr_to_offset_y = 0
	
	if get_parent().plr_hold_card == null:
		Input.set_default_cursor_shape(Input.CURSOR_ARROW)
	
	#card checking
	var reverse_children = get_children()
	reverse_children.reverse()
	
	if get_parent().plr_hold_card == null and get_parent().setup_complete and get_parent().turn == \"p\":
		for c in reverse_children: #check if atleast one card have been hover
			if c.mouse_in:
				c.spr_to_offset_y = -hover_offset
				Input.set_default_cursor_shape(Input.CURSOR_POINTING_HAND)
				if Input.is_action_just_pressed(\"m1\") and get_parent().plr_hold_card == null: #when click on card
					c.reparent(get_tree().current_scene) #reparent the card to be out of hand
					c.to_pos = Vector2(120 + 16,100)
					c.spr_to_offset_y = 0
					
					get_parent().plr_hold_card = c #set hold card to the card
					
					update_card()
				break
	
	#update stuff
	if get_parent().plr_hold_card != null or get_parent().turn != \"p\": # lower the card hand when already choose card (and when enemy is choosing later)
		self_offset_y = 16
	else:
		self_offset_y = 0
	
	position += ((self_init_pos + Vector2(0, self_offset_y)) - position) * 0.1
	
	#debug card add
	if Input.is_action_just_pressed(\"ui_accept\"):
		var card_ins = card.instantiate()
		
		randomize()
		card_ins.value = randi_range(1,12) #get random card value
		
		if card_ins.value >= 10:
			card_ins.value = randi_range(10,13)
		
		add_card(card_ins)
	
	if Input.is_action_just_pressed(\"m2\") and get_parent().plr_hold_card != null: #return card when pressing m2
		get_parent().plr_hold_card.reparent(self) #reparenting back
		add_card(get_parent().plr_hold_card, false)
		
		get_parent().plr_hold_card = null
	
"

[sub_resource type="GDScript" id="GDScript_n5oag"]
resource_name = "token_mark"
script/source = "extends Marker2D

const TOKEN_GAP = 16

var to_pos = Vector2()

var self_init_pos = Vector2()
var self_offset_x = -16 #when not active

var card = preload(\"res://src/obj/plr_card.tscn\")
var token = preload(\"res://src/obj/minus_token.tscn\")

const RED_COLOR = Color(\"ba3e19\")

func _ready() -> void:
	self_init_pos = position #set init position for reference
	update_token() #update token position

func add_token():
	var tok_ins = token.instantiate()
	add_child(tok_ins)
	
	tok_ins.position = position + Vector2(32, -TOKEN_GAP * get_child_count())
	#print((-TOKEN_GAP) * (get_child_count()-1))
	
	update_token()

func update_token():
	
	var reverse_children = get_children()
	reverse_children.reverse()
	
	for i in get_child_count():
		var ii = get_child_count() - i - 1
		var t = get_children()[ii]
		
		t.to_pos = Vector2(0, -TOKEN_GAP * i)
		

@warning_ignore(\"unused_parameter\")
func _process(delta: float) -> void:
	if Input.is_action_just_pressed(\"ui_down\"):
		#add_token()
		update_token()
	
	if get_parent().plr_hold_card != null and get_parent().turn == \"p\":
		if get_parent().plr_hold_card.mouse_in == false:
			Input.set_default_cursor_shape(Input.CURSOR_ARROW)
		
		for t in get_children():
			t.to_pos.x = 0
		
		var reverse_children = get_children()
		reverse_children.reverse()
		
		for i in range(get_child_count()): #check for every token if atleast one have been hovering
			var ii = get_child_count() - i - 1
			var t = get_children()[ii]
			
			if t.mouse_in:
				Input.set_default_cursor_shape(Input.CURSOR_POINTING_HAND)
				t.to_pos.x = -8
				if Input.is_action_just_pressed(\"m1\"): #if pressing on any token, remove the top one
					#t.queue_free()
					get_children().erase(t)
					t.queue_free()
					
					get_node(get_parent().stack_path).stack_sum -= get_parent().plr_hold_card.real_value
					
					randomize()
					
					#spawn part on cursor
					PartSpawner.spawn(\"circle_ex\", get_global_mouse_position(), {\"radius\":15, \"added_radius\":10, \"speed\": 0.7, \"col\" : RED_COLOR})
					PartSpawner.spawn(\"circle_ex\", get_global_mouse_position(), {\"radius\":30, \"added_radius\":20, \"speed\": 0.7, \"col\" : RED_COLOR})
					PartSpawner.spawn(\"line_ex\", get_global_mouse_position(), {\"scale\": Vector2(2,2), \"speed\": 0.8, \"rotation_degrees\": randf_range(0, 359), \"modulate\" : RED_COLOR})
					
					
					PartSpawner.spawn(\"spr_ex\",get_parent().plr_hold_card.global_position + Vector2(-16,24) , {\"spr\" : load(\"res://asset/obj/ptt_plrcard.png\"), \"centered\": true, \"spr_speed\" : 0.97, \"speed\": 0.7, \"modulate\": RED_COLOR})
					
					PartSpawner.spawn(\"circle_ex\", get_node(get_parent().stack_path).global_position, {\"radius\":35, \"added_radius\":15, \"col\" : RED_COLOR})
					
					PartSpawner.spawn(\"text_float\", get_node(get_parent().stack_path).global_position + Vector2(0,-4), {\"text\": \"-\" + var_to_str(get_parent().plr_hold_card.real_value), \"color\": RED_COLOR, \"outline_color\": Color.BLACK})
					
					get_parent().plr_hold_card.queue_free()
					get_parent().plr_hold_card = null
					
					var card_ins = card.instantiate()
					randomize()
					
					card_ins.value = randi_range(1,12) #get random card value
					
					if card_ins.value >= 10:
						card_ins.value = randi_range(10,13)
					
					get_node(get_parent().plr_card_mark_path).add_card(card_ins)
					
					update_token()
					#get_parent().turn = \"e\" #change to enemy turn
					break
				break
	
	if get_parent().plr_hold_card == null or get_parent().turn != \"p\": #when token is not active
		to_pos = self_init_pos
	else:
		to_pos = self_init_pos + Vector2(self_offset_x, 0)
	
	position += (to_pos - position) * 0.1
"

[node name="game" type="Node2D"]
script = SubResource("GDScript_j1ehk")

[node name="stack" type="Node2D" parent="."]
position = Vector2(120, 90)
script = SubResource("GDScript_qih31")

[node name="Icon" type="Sprite2D" parent="stack"]
visible = false
self_modulate = Color(0.427493, 0.427493, 0.427493, 1)
scale = Vector2(0.28125, 0.28125)
texture = ExtResource("1_4lbv0")

[node name="stack_num" type="Label" parent="stack"]
offset_left = -38.0
offset_top = -17.0
offset_right = 38.0
offset_bottom = 19.0
text = "123"
label_settings = SubResource("LabelSettings_e3hox")
horizontal_alignment = 1
vertical_alignment = 1

[node name="plr_card_mark" type="Marker2D" parent="."]
position = Vector2(209, 141)
gizmo_extents = 16.0
script = SubResource("GDScript_4lbv0")

[node name="plr_token_mark" type="Marker2D" parent="."]
position = Vector2(229, 122)
gizmo_extents = 16.0
script = SubResource("GDScript_n5oag")

[node name="Camera2D" type="Camera2D" parent="."]
anchor_mode = 0
